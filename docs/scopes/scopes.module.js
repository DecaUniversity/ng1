"use strict";

angular.module("scopeExample", []).config(["$sceDelegateProvider", function ($sceDelegateProvider) {

	/**
  * AngularJS' Strict Contextual Escaping (SCE) mode, enabled by default, blocks
  * loading a resource from an insecure URL.
  * By default, only URLs that belong to the same origin are trusted. These are
  * URLs with the same domain, protocol and port as the application document.
  * To use a source from other domains and/or protocols, either adjust the
  * whitelist/blacklist or wrap the URL with a call to $sce.trustAsResourceURL
  */

	$sceDelegateProvider.resourceUrlWhitelist(["self", "https://www.youtube.com/embed/**"]);
}]);

angular.module("scopeExample").controller("ScopeExampleController", ["$scope", function ($scope) {

	$scope.devWork = true;

	$scope.autoplay = true;

	$scope.videoChosen = false;

	$scope.defaultVideo = {
		code: "",
		start: 0
	};

	$scope.videoLinks = new Map();

	$scope.videoLinks.set("adele", {
		code: "YQHsXMglC9A",
		start: 80
	});

	$scope.videoLinks.set("lionel", {
		code: "AiC7ZX5K9L4",
		start: 39
	});

	$scope.videoLinks.set("dragonette", {
		code: "LnET4RKXx5k",
		start: 29
	});

	$scope.getVideoLink = function () {

		return "https://www.youtube.com/embed/" + ($scope.defaultVideo.code + "?") + ("start=" + $scope.defaultVideo.start) + ("&rel=0&autoplay=" + $scope.autoplay);
	};

	$scope.setVideo = function (singer) {

		$scope.defaultVideo.code = $scope.videoLinks.get(singer).code;
		$scope.defaultVideo.start = $scope.videoLinks.get(singer).start;

		$scope.getVideoLink();

		$scope.videoChosen = true;
	};

	/**
  * Hello, it's me
  I was wondering if after all these bears you'd like to pee
  To let go of everything
  They say that time's supposed to heal ya
  But I ain't done much healing
  */
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjb3Blcy9zY29wZXMubW9kdWxlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkc2NlRGVsZWdhdGVQcm92aWRlciIsInJlc291cmNlVXJsV2hpdGVsaXN0IiwiY29udHJvbGxlciIsIiRzY29wZSIsImRldldvcmsiLCJhdXRvcGxheSIsInZpZGVvQ2hvc2VuIiwiZGVmYXVsdFZpZGVvIiwiY29kZSIsInN0YXJ0IiwidmlkZW9MaW5rcyIsIk1hcCIsInNldCIsImdldFZpZGVvTGluayIsInNldFZpZGVvIiwic2luZ2VyIiwiZ2V0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsUUFBUUMsTUFBUixDQUFlLGNBQWYsRUFBK0IsRUFBL0IsRUFDRUMsTUFERixDQUNTLENBQUMsc0JBQUQsRUFBeUIsVUFBVUMsb0JBQVYsRUFBZ0M7O0FBRWhFOzs7Ozs7Ozs7QUFTQUEsc0JBQXFCQyxvQkFBckIsQ0FBMEMsQ0FDekMsTUFEeUMsRUFFekMsa0NBRnlDLENBQTFDO0FBS0EsQ0FoQk8sQ0FEVDs7QUFtQkFKLFFBQVFDLE1BQVIsQ0FBZSxjQUFmLEVBQ0VJLFVBREYsQ0FDYSx3QkFEYixFQUN1QyxDQUFDLFFBQUQsRUFBVyxVQUFVQyxNQUFWLEVBQWtCOztBQUVsRUEsUUFBT0MsT0FBUCxHQUFpQixJQUFqQjs7QUFFQUQsUUFBT0UsUUFBUCxHQUFrQixJQUFsQjs7QUFFQUYsUUFBT0csV0FBUCxHQUFxQixLQUFyQjs7QUFFQUgsUUFBT0ksWUFBUCxHQUFzQjtBQUNyQkMsUUFBTSxFQURlO0FBRXJCQyxTQUFPO0FBRmMsRUFBdEI7O0FBS0FOLFFBQU9PLFVBQVAsR0FBb0IsSUFBSUMsR0FBSixFQUFwQjs7QUFFQVIsUUFBT08sVUFBUCxDQUFrQkUsR0FBbEIsQ0FBc0IsT0FBdEIsRUFBK0I7QUFDOUJKLFFBQU0sYUFEd0I7QUFFOUJDLFNBQU87QUFGdUIsRUFBL0I7O0FBS0FOLFFBQU9PLFVBQVAsQ0FBa0JFLEdBQWxCLENBQXNCLFFBQXRCLEVBQWdDO0FBQy9CSixRQUFNLGFBRHlCO0FBRS9CQyxTQUFPO0FBRndCLEVBQWhDOztBQUtBTixRQUFPTyxVQUFQLENBQWtCRSxHQUFsQixDQUFzQixZQUF0QixFQUFvQztBQUNuQ0osUUFBTSxhQUQ2QjtBQUVuQ0MsU0FBTztBQUY0QixFQUFwQzs7QUFLQU4sUUFBT1UsWUFBUCxHQUFzQixZQUFZOztBQUVqQyxTQUFPLG9DQUNIVixPQUFPSSxZQUFQLENBQW9CQyxJQURqQixzQkFFR0wsT0FBT0ksWUFBUCxDQUFvQkUsS0FGdkIsMEJBR2FOLE9BQU9FLFFBSHBCLENBQVA7QUFLQSxFQVBEOztBQVNBRixRQUFPVyxRQUFQLEdBQWtCLFVBQVVDLE1BQVYsRUFBa0I7O0FBRW5DWixTQUFPSSxZQUFQLENBQW9CQyxJQUFwQixHQUEyQkwsT0FBT08sVUFBUCxDQUFrQk0sR0FBbEIsQ0FBc0JELE1BQXRCLEVBQThCUCxJQUF6RDtBQUNBTCxTQUFPSSxZQUFQLENBQW9CRSxLQUFwQixHQUE0Qk4sT0FBT08sVUFBUCxDQUFrQk0sR0FBbEIsQ0FBc0JELE1BQXRCLEVBQThCTixLQUExRDs7QUFFQU4sU0FBT1UsWUFBUDs7QUFFQVYsU0FBT0csV0FBUCxHQUFxQixJQUFyQjtBQUVBLEVBVEQ7O0FBV0E7Ozs7Ozs7QUFRQSxDQTFEcUMsQ0FEdkMiLCJmaWxlIjoic2NvcGVzL3Njb3Blcy5tb2R1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuYW5ndWxhci5tb2R1bGUoXCJzY29wZUV4YW1wbGVcIiwgW10pXG5cdC5jb25maWcoW1wiJHNjZURlbGVnYXRlUHJvdmlkZXJcIiwgZnVuY3Rpb24gKCRzY2VEZWxlZ2F0ZVByb3ZpZGVyKSB7XG5cdFx0XG5cdFx0LyoqXG5cdFx0ICogQW5ndWxhckpTJyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKSBtb2RlLCBlbmFibGVkIGJ5IGRlZmF1bHQsIGJsb2Nrc1xuXHRcdCAqIGxvYWRpbmcgYSByZXNvdXJjZSBmcm9tIGFuIGluc2VjdXJlIFVSTC5cblx0XHQgKiBCeSBkZWZhdWx0LCBvbmx5IFVSTHMgdGhhdCBiZWxvbmcgdG8gdGhlIHNhbWUgb3JpZ2luIGFyZSB0cnVzdGVkLiBUaGVzZSBhcmVcblx0XHQgKiBVUkxzIHdpdGggdGhlIHNhbWUgZG9tYWluLCBwcm90b2NvbCBhbmQgcG9ydCBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG5cdFx0ICogVG8gdXNlIGEgc291cmNlIGZyb20gb3RoZXIgZG9tYWlucyBhbmQvb3IgcHJvdG9jb2xzLCBlaXRoZXIgYWRqdXN0IHRoZVxuXHRcdCAqIHdoaXRlbGlzdC9ibGFja2xpc3Qgb3Igd3JhcCB0aGUgVVJMIHdpdGggYSBjYWxsIHRvICRzY2UudHJ1c3RBc1Jlc291cmNlVVJMXG5cdFx0ICovXG5cdFx0XG5cdFx0JHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3QoW1xuXHRcdFx0XCJzZWxmXCIsXG5cdFx0XHRcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyoqXCJcblx0XHRdKTtcblx0XHRcblx0fV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInNjb3BlRXhhbXBsZVwiKVxuXHQuY29udHJvbGxlcihcIlNjb3BlRXhhbXBsZUNvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIGZ1bmN0aW9uICgkc2NvcGUpIHtcblx0XHRcblx0XHQkc2NvcGUuZGV2V29yayA9IHRydWU7XG5cdFx0XG5cdFx0JHNjb3BlLmF1dG9wbGF5ID0gdHJ1ZTtcblx0XHRcblx0XHQkc2NvcGUudmlkZW9DaG9zZW4gPSBmYWxzZTtcblx0XHRcblx0XHQkc2NvcGUuZGVmYXVsdFZpZGVvID0ge1xuXHRcdFx0Y29kZTogXCJcIixcblx0XHRcdHN0YXJ0OiAwXG5cdFx0fTtcblx0XHRcblx0XHQkc2NvcGUudmlkZW9MaW5rcyA9IG5ldyBNYXAoKTtcblx0XHRcblx0XHQkc2NvcGUudmlkZW9MaW5rcy5zZXQoXCJhZGVsZVwiLCB7XG5cdFx0XHRjb2RlOiBcIllRSHNYTWdsQzlBXCIsXG5cdFx0XHRzdGFydDogODBcblx0XHR9KTtcblx0XHRcblx0XHQkc2NvcGUudmlkZW9MaW5rcy5zZXQoXCJsaW9uZWxcIiwge1xuXHRcdFx0Y29kZTogXCJBaUM3Wlg1SzlMNFwiLFxuXHRcdFx0c3RhcnQ6IDM5XG5cdFx0fSk7XG5cdFx0XG5cdFx0JHNjb3BlLnZpZGVvTGlua3Muc2V0KFwiZHJhZ29uZXR0ZVwiLCB7XG5cdFx0XHRjb2RlOiBcIkxuRVQ0UktYeDVrXCIsXG5cdFx0XHRzdGFydDogMjlcblx0XHR9KTtcblx0XHRcblx0XHQkc2NvcGUuZ2V0VmlkZW9MaW5rID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9cIiArXG5cdFx0XHRcdGAkeyRzY29wZS5kZWZhdWx0VmlkZW8uY29kZX0/YCArXG5cdFx0XHRcdGBzdGFydD0keyRzY29wZS5kZWZhdWx0VmlkZW8uc3RhcnR9YCArXG5cdFx0XHRcdGAmcmVsPTAmYXV0b3BsYXk9JHskc2NvcGUuYXV0b3BsYXl9YDtcblx0XHRcdFxuXHRcdH07XG5cdFx0XG5cdFx0JHNjb3BlLnNldFZpZGVvID0gZnVuY3Rpb24gKHNpbmdlcikge1xuXHRcdFx0XG5cdFx0XHQkc2NvcGUuZGVmYXVsdFZpZGVvLmNvZGUgPSAkc2NvcGUudmlkZW9MaW5rcy5nZXQoc2luZ2VyKS5jb2RlO1xuXHRcdFx0JHNjb3BlLmRlZmF1bHRWaWRlby5zdGFydCA9ICRzY29wZS52aWRlb0xpbmtzLmdldChzaW5nZXIpLnN0YXJ0O1xuXHRcdFx0XG5cdFx0XHQkc2NvcGUuZ2V0VmlkZW9MaW5rKCk7XG5cdFx0XHRcblx0XHRcdCRzY29wZS52aWRlb0Nob3NlbiA9IHRydWU7XG5cdFx0XHRcblx0XHR9O1xuXHRcdFxuXHRcdC8qKlxuXHRcdCAqIEhlbGxvLCBpdCdzIG1lXG5cdFx0IEkgd2FzIHdvbmRlcmluZyBpZiBhZnRlciBhbGwgdGhlc2UgYmVhcnMgeW91J2QgbGlrZSB0byBwZWVcblx0XHQgVG8gbGV0IGdvIG9mIGV2ZXJ5dGhpbmdcblx0XHQgVGhleSBzYXkgdGhhdCB0aW1lJ3Mgc3VwcG9zZWQgdG8gaGVhbCB5YVxuXHRcdCBCdXQgSSBhaW4ndCBkb25lIG11Y2ggaGVhbGluZ1xuXHRcdCAqL1xuXHRcdFxuXHR9XSk7XG4iXX0=
